{
    "inputs": {
        "sample_options": {
            "name": "Sample options",
            "description": "Parameters relating to the sample being analysed.",
            "advanced": false,
            "properties": {
                "samplesheet": {
                    "name": "Sample",
                    "type": "sample",
                    "pattern": "csv|xlsx",
                    "required": true,
                    "description": "The sample to process.",
                    "csv": {
                        "group": "name",
                        "replicate": "\"1\"",
                        "fastq_1": "input.1",
                        "fastq_2": "input.2"
                    }
                }
            }
        },
        "genome_options": {
            "name": "Genome options",
            "description": "The genome being aligned to.",
            "advanced": false,
            "takes_genome": true,
            "properties": {
                "fasta": {
                    "name": "Genome FASTA",
                    "type": "file",
                    "pattern": "fasta|fa$",
                    "required": true,
                    "genome_file": "fasta",
                    "description": "A raw genome FASTA file."
                },
                "gtf": {
                    "name": "GTF",
                    "type": "file",
                    "pattern": "gtf",
                    "required": true,
                    "genome_file": "gtf",
                    "description": "An annotation for the genome."
                },
                "smrna_fasta": {
                    "name": "smRNA FASTA",
                    "type": "file",
                    "pattern": "fasta|fa$",
                    "required": true,
                    "genome_file": "fasta|fa$",
                    "description": "FASTA file to be mapped to before the genome file, typically containing rRNA and tRNA sequences."
                },
                "fasta_fai": {
                    "name": "Genome FASTA index",
                    "type": "file",
                    "pattern": "fai$",
                    "required": false,
                    "genome_output": {
                        "process": "PREPARE_PRIMARY_GENOME:CUSTOM_GETCHROMSIZES",
                        "filetype": "fai"
                    },
                    "description": "A genome FASTA file index generated by Samtools faidx."
                },
                "chrom_sizes": {
                    "name": "Genome chromosome lengths",
                    "type": "file",
                    "pattern": "sizes$",
                    "required": false,
                    "genome_output": {
                        "process": "PREPARE_PRIMARY_GENOME:CUSTOM_GETCHROMSIZES",
                        "filetype": "sizes"
                    },
                    "description": "A tabulated file of chromosome names and lengths."
                },
                "genome_index": {
                    "name": "Genome STAR index",
                    "type": "file",
                    "pattern": "",
                    "required": false,
                    "genome_output": {
                        "process": "STAR_GENOMEGENERATE",
                        "filetype": ""
                    },
                    "description": "A genome index generated by STAR."
                },
                "smrna_index": {
                    "name": "Small RNA Bowtie index",
                    "type": "file",
                    "pattern": "",
                    "required": false,
                    "genome_output": {
                        "process": "BOWTIE_BUILD",
                        "filetype": ""
                    },
                    "description": "A small RNA index for pre-mapping generated by Bowtie."
                },
                "smrna_fasta_fai": {
                    "name": "Small RNA FASTA index",
                    "type": "file",
                    "pattern": "fai$",
                    "required": false,
                    "genome_output": {
                        "process": "PREPARE_SMRNA_GENOME:CUSTOM_GETCHROMSIZES",
                        "filetype": "fai"
                    },
                    "description": "A small RNA FASTA file index generated by Samtools faidx."
                },
                "smrna_chrom_sizes": {
                    "name": "Small RNA lengths",
                    "type": "file",
                    "pattern": "sizes$",
                    "required": false,
                    "genome_output": {
                        "process": "PREPARE_SMRNA_GENOME:CUSTOM_GETCHROMSIZES",
                        "filetype": "sizes"
                    },
                    "description": "A tabulated file of small RNA names and lengths."
                },
                "longest_transcript": {
                    "name": "Longest transcript IDs",
                    "type": "file",
                    "pattern": "txt$",
                    "required": false,
                    "genome_output": {
                        "process": "CLIPSEQ_FIND_LONGEST_TRANSCRIPT",
                        "filetype": "txt"
                    },
                    "description": "A list of transcript IDs for the longest transcript for each gene in provided GTF annotation."
                },
                "longest_transcript_fai": {
                    "name": "Longest transcript IDs and lengths",
                    "type": "file",
                    "pattern": "fai$",
                    "required": false,
                    "genome_output": {
                        "process": "CLIPSEQ_FIND_LONGEST_TRANSCRIPT",
                        "filetype": "fai"
                    },
                    "description": "A tabulated file of transcript IDs and lengths for the longest transcript for each gene in provided GTF annotation."
                },
                "longest_transcript_gtf": {
                    "name": "Longest transcript IDs",
                    "type": "file",
                    "pattern": "gtf$",
                    "required": false,
                    "genome_output": {
                        "process": "CLIPSEQ_FIND_LONGEST_TRANSCRIPT",
                        "filetype": "gtf"
                    },
                    "description": "A list of transcript IDs for the longest transcript for each gene in provided GTF annotation."
                },
                "filtered_gtf": {
                    "name": "Filtered GTF",
                    "type": "file",
                    "pattern": "gtf$",
                    "required": false,
                    "genome_output": {
                        "process": "CLIPSEQ_FILTER_GTF",
                        "filetype": "gtf"
                    },
                    "description": "GTF filtered for 'basic' transcript tag and support levels TSL1 and TSL2 to improve performance of downstream tools."
                },
                "seg_gtf": {
                    "name": "Segmented GTF",
                    "type": "file",
                    "pattern": "gtf$",
                    "required": false,
                    "genome_output": {
                        "process": "ICOUNT_SEG_GTF",
                        "filetype": "gtf"
                    },
                    "description": "GTF segmented for use in iCount peak calling using iCount segment command."
                },
                "seg_filt_gtf": {
                    "name": "Segmented filtered GTF",
                    "type": "file",
                    "pattern": "gtf$",
                    "required": false,
                    "genome_output": {
                        "process": "ICOUNT_SEG_FILTGTF",
                        "filetype": "gtf"
                    },
                    "description": "Filtered GTF segmented for use in iCount peak calling using iCount segment command."
                },
                "seg_resolved_gtf": {
                    "name": "Segmented resolved filtered GTF",
                    "type": "file",
                    "pattern": "gtf$",
                    "required": false,
                    "genome_output": {
                        "process": "RESOLVE_UNANNOTATED",
                        "filetype": "gtf"
                    },
                    "description": "Filtered GTF segmented using iCount segment command and then resolve unannotated regions by overlapping transcript segments."
                },
                "seg_resolved_gtf_genic": {
                    "name": "Segmented resolved genic filtered GTF",
                    "type": "file",
                    "pattern": "gtf$",
                    "required": false,
                    "genome_output": {
                        "process": "RESOLVE_UNANNOTATED_GENIC_OTHER",
                        "filetype": "gtf"
                    },
                    "description": "Filtered GTF segmented using iCount segment command and then resolve unannotated regions by annotating as 'genic other'."
                },
                "regions_gtf": {
                    "name": "Regions GTF",
                    "type": "file",
                    "pattern": "gtf.gz$",
                    "required": false,
                    "genome_output": {
                        "process": "ICOUNT_SEG_GTF",
                        "filetype": "gtf.gz"
                    },
                    "description": "GTF regions for use in PEKA using iCount segment command."
                },
                "regions_filt_gtf": {
                    "name": "Filtered regions GTF",
                    "type": "file",
                    "pattern": "gtf.gz$",
                    "required": false,
                    "genome_output": {
                        "process": "ICOUNT_SEG_FILTGTF",
                        "filetype": "gtf.gz"
                    },
                    "description": "Filtered GTF regions for use in PEKA using iCount segment command."
                },
                "regions_resolved_gtf": {
                    "name": "Filtered resolved regions GTF",
                    "type": "file",
                    "pattern": "gtf$",
                    "required": false,
                    "genome_output": {
                        "process": "RESOLVE_UNANNOTATED_REGIONS",
                        "filetype": "gtf"
                    },
                    "description": "Filtered GTF regions using iCount segment command and then resolve unannotated regions by overlapping transcript segments."
                },
                "regions_resolved_gtf_genic": {
                    "name": "Filtered resolved regions genic GTF",
                    "type": "file",
                    "pattern": "gtf$",
                    "required": false,
                    "genome_output": {
                        "process": "RESOLVE_UNANNOTATED_GENIC_OTHER_REGIONS",
                        "filetype": "gtf"
                    },
                    "description": "Filtered GTF regions using iCount segment command and then resolve unannotated regions by annotating as 'genic other'."
                }
            }
        },
        "settings_options": {
            "name": "Settings",
            "description": "Additional configuration.",
            "advanced": true,
            "properties": {
                "remove_dedupe": {
                    "name": "Skip Dedupe",
                    "description": "Skip the UMI deduplication of BAMs step.",
                    "type": "boolean",
                    "default": false
                },
                "change_umi_delim": {
                    "name": "UMI Delimiter",
                    "description": "The delimiter that UMICollapse uses to search for UMIs in your aligned reads.",
                    "type": "string"
                },
                "min_trim": {
                    "name": "Trim minimum length",
                    "description": "Minimum length of read to keep after Trim Galore! trimming",
                    "type": "number"
                },
                "min_paraclu": {
                    "name": "Paraclu min value",
                    "description": "Omit clusters whose total data value is less than this minimum value.",
                    "type": "number"
                }
            }
        },
        "cli_options": {
            "name": "Command Line Options",
            "description": "Proide customised command line options to specific processes",
            "advanced": true,
            "properties": {
                "bowtie_params": {
                    "name": "Bowtie parameters",
                    "description": "Mapping parameters for Bowtie pre-mapping",
                    "type": "string"
                },
                "star_params": {
                    "name": "STAR parameters",
                    "description": "Mapping parameters for STAR mapping",
                    "type": "string"
                },
                "clippy_params": {
                    "name": "Clippy parameters",
                    "description": "Parameters for Clippy peak calling",
                    "type": "string"
                },
                "icount_peak_params": {
                    "name": "iCount peak parameters",
                    "description": "Parameters for iCount peak calling",
                    "type": "string"
                },
                "peka_params": {
                    "name": "PEKA parameters",
                    "description": "Parameters for PEKA K-mer enrichment analysis",
                    "type": "string"
                }
            }
        }
    },
    "outputs": [
        {
            "name": "Normalised genome crosslink bedgraph",
            "description": "Genomic crosslinks normalised to total sample crosslinks in bedgraph format for genome browser viewing.",
            "filetype": "bedgraph",
            "process": "CROSSLINK_NORMCOVERAGE"
        },
        {
            "name": "Genomic peaks",
            "description": "Genomic peaks generated by Clippy.",
            "filetype": "bed",
            "process": "CLIPPY_GENOME"
        },
        {
            "name": "Crosslink biotype summary",
            "description": "Crosslinks summarised by RNA biotype. (Note: summaries by gene and transcript region also available)",
            "filetype": "tsv",
            "process": "ICOUNT_SUMMARY"
        },
        {
            "name": "K-mer enrichment",
            "description": "K-mer enrichment motif analysis performed by PEKA. PDF file with graphs showing K-mer occurrence distributions around thresholded crosslink sites.",
            "filetype": "pdf",
            "process": "PEKA"
        },
        {
            "name": "Quality control report",
            "description": "MultiQC report of important quality control metrics.",
            "filetype": "html",
            "process": "MULTIQC"
        }
    ]
}
