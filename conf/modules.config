/*
========================================================================================
    GENERAL
========================================================================================
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

/*
========================================================================================
    INPUT
========================================================================================
*/

if(params.run_input_check) {
    process {
        withName: 'CLIPSEQ:PARSE_FASTQ_INPUT:SAMPLE_BASE_SAMPLESHEET_CHECK' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:PARSE_FASTQ_INPUT:CAT_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_merged_fastq
            ]
        }
    }   
}

/*
========================================================================================
    GENOME PREPARATION
========================================================================================
*/

if(params.run_genome_prep) {
    process {
        withName: 'UNTAR_.*' {
            ext.args2 = '--no-same-owner'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:GUNZIP_FASTA' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:GUNZIP_GTF' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_GENOME:GUNZIP_FASTA' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:CUSTOM_GETCHROMSIZES' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_GENOME:CUSTOM_GETCHROMSIZES' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:CLIPSEQ_FIND_LONGEST_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:CLIPSEQ_FILTER_GTF' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:ICOUNT_SEG_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:ICOUNT_SEG_FILTGTF' {
            ext.prefix = '.filt.seg'
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED_GENIC_OTHER' {
            ext.output = { "${annotation.simpleName}.resolved_genic_other.gtf" }
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_INDEX:STAR_GENOMEGENERATE' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_indexes
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_INDEX:BOWTIE_BUILD' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_indexes
            ]
        }
    }
}

/*
========================================================================================
    FASTQ + TRIMMING
========================================================================================
*/

process {
    withName: 'CLIPSEQ:UMITOOLS_EXTRACT' {
        ext.args   = { "--bc-pattern= ${params.move_umi} --extract-method=string" }
        publishDir = [
            path: { "${params.outdir}/01_prealign/pre_trim_move_umi_to_header" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

if(params.run_trim_galore_fastqc && !params.skip_fastqc) {
    process {
        withName: 'CLIPSEQ:FASTQC_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
            publishDir = [
                path: { "${params.outdir}/01_prealign/pre_trim_fastqc" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }
}

if(params.run_trim_galore_fastqc && !params.skip_trimming) {
    process {
        withName: 'CLIPSEQ:FASTQC_TRIMGALORE:TRIMGALORE' {
            ext.args   = "--fastqc --length ${params.trim_length}"
            publishDir = [
                [
                    path: { "${params.outdir}/01_prealign/post_trim_fastqc" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimgalore" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.fastq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimgalore" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

/*
========================================================================================
    ALIGNMENT
========================================================================================
*/

if(params.run_alignment) {
    process {
        withName: 'CLIPSEQ:RNA_ALIGN:BOWTIE_ALIGN' {
            ext.args = { "${params.bowtie_params}" }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/smrna" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.out'
                ],
                [
                    path: { "${params.outdir}/02_alignment/smrna" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam',
                    enabled: params.save_align_intermed
                ],
                [
                    path: { "${params.outdir}/02_alignment/smrna/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:STAR_ALIGN' {
            ext.args   = [
                '--readFilesCommand zcat',
                '--outSAMtype BAM SortedByCoordinate',
                '--quantMode TranscriptomeSAM',
                '--outFilterMultimapNmax 1',
                '--outFilterMultimapScoreRange 1',
                '--outSAMattributes All',
                '--alignSJoverhangMin 8',
                '--alignSJDBoverhangMin 1',
                '--outFilterType BySJout',
                '--alignIntronMin 20',
                '--alignIntronMax 1000000',
                '--outFilterScoreMin 10',
                '--alignEndsType Extend5pOfRead1',
                '--twopassMode Basic',
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/target/log" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.Log.*'
                ],
                [
                    path: { "${params.outdir}/02_alignment/target" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam',
                    enabled: params.save_align_intermed
                ],
                [
                    path: { "${params.outdir}/02_alignment/target/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:.*BAM_STATS_SAMTOOLS_GENOME:.*' {
            ext.prefix = { "${meta.id}.genome.raw" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPT:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.transcript.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPT:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:.*BAM_SORT_STATS_SAMTOOLS_TRANSCRIPT:.*' {
            ext.prefix = { "${meta.id}.transcript.raw" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: params.save_align_intermed
            ]
        }
    }
}

/*
========================================================================================
    READ FILTERING / UMI DEDUP_COLLAPSE
========================================================================================
*/

if(params.run_read_filter) {
    process {
        withName: 'CLIPSEQ:FILTER_TRANSCRIPTS' {
            ext.args   = '-h'
            ext.prefix = { "${meta.id}.transcript.filt" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPT:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.transcript.filt.sorted" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPT:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:.*BAM_SORT_STATS_SAMTOOLS_TRANSCRIPT:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.transcript.filt" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: params.save_align_intermed
            ]
        }
    }
}

if(params.run_umi_dedup) {
    process {
        withName: 'CLIPSEQ:GENOME_DEDUP:UMITOOLS_COLLAPSE' {
            ext.args = { "--umi-sep ${params.umi_separator}" }
            ext.prefix = { "${meta.id}.genome.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:GENOME_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:GENOME_DEDUP:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.genome.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'CLIPSEQ:TRANSCRIPT_DEDUP:UMITOOLS_COLLAPSE' {
            ext.args = { "--umi-sep ${params.umi_separator}" }
            ext.prefix = { "${meta.id}.transcript.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:TRANSCRIPT_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:TRANSCRIPT_DEDUP:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.transcript.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }
    }
}

/*
========================================================================================
    CROSSLINKS
========================================================================================
*/

if(params.run_calc_crosslinks) {
    process {
        withName: '.*CROSSLINKS:BEDTOOLS_BAMTOBED' {
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*CROSSLINKS:BEDTOOLS_SHIFT' {
            ext.args = '-m 1 -p -1'
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*CROSSLINKS:BEDTOOLS_GENOMECOV_POS' {
            ext.args = '-dz -strand + -5'
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*CROSSLINKS:BEDTOOLS_GENOMECOV_NEG' {
            ext.args = '-dz -strand - -5'
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*CROSSLINKS:SELECT_BED_POS' {
            ext.cmd1 = 'awk \'{OFS="\\t"}{print \$1, \$2, \$2+1, ".", \$3, "+"}\''
            ext.suffix = '.pos'
            ext.ext = 'bed'
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*CROSSLINKS:SELECT_BED_NEG' {
            ext.cmd1 = 'awk \'{OFS="\\t"}{print \$1, \$2, \$2+1, ".", \$3, "-"}\''
            ext.suffix = '.neg'
            ext.ext = 'bed'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:CALC_GENOME_CROSSLINKS:MERGE_AND_SORT' {
            ext.cmd1 = 'sort -k1,1 -k2,2n'
            ext.suffix = '.genome'
            ext.ext = 'bed'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:CALC_GENOME_CROSSLINKS:CROSSLINK_COVERAGE' {
            ext.cmd1 = 'awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | sort -k1,1 -k2,2n'
            ext.suffix = '.genome'
            ext.ext = 'bedgraph'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:CALC_GENOME_CROSSLINKS:CROSSLINK_NORMCOVERAGE' {
            ext.cmd1 = """
            awk -v total=\$CMD2 \'{printf "%s\\t%i\\t%i\\t%s\\t%f\\t%s\\n", \$1, \$2, \$3, \$4, 1000000*\$5/total, \$6}\' | 
            awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | 
            sort -k1,1 -k2,2n
            """
            ext.cmd2 = 'awk \'BEGIN {total=0} {total=total+\$5} END {print total}\''
            ext.suffix = '.norm.genome'
            ext.ext = 'bedgraph'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:CALC_TRANSCRIPT_CROSSLINKS:MERGE_AND_SORT' {
            ext.cmd1 = 'sort -k1,1 -k2,2n'
            ext.suffix = '.transcript'
            ext.ext = 'bed'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:CALC_TRANSCRIPT_CROSSLINKS:CROSSLINK_COVERAGE' {
            ext.cmd1 = 'awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | sort -k1,1 -k2,2n'
            ext.suffix = '.transcript'
            ext.ext = 'bedgraph'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:CALC_TRANSCRIPT_CROSSLINKS:CROSSLINK_NORMCOVERAGE' {
            ext.cmd1 = """
            awk -v total=\$CMD2 \'{printf "%s\\t%i\\t%i\\t%s\\t%f\\t%s\\n", \$1, \$2, \$3, \$4, 1000000*\$5/total, \$6}\' | 
            awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | 
            sort -k1,1 -k2,2n
            """
            ext.cmd2 = 'awk \'BEGIN {total=0} {total=total+\$5} END {print total}\''
            ext.suffix = '.norm.transcript'
            ext.ext = 'bedgraph'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/*
========================================================================================
    PEAKCALLING
========================================================================================
*/

if(params.run_peak_calling) {
    process {
        withName: 'CLIPSEQ:CLIPPY' {
            ext.prefix = { "${meta.id}.clippy." }
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/clippy" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE:PARACLU_PREPARE' {
            ext.cmd1 = 'awk \'{OFS = "\t"}{print \$1, \$6, \$2+1, \$5}\' | sort -k1,1 -k2,2 -k3,3n'
            ext.suffix = ''
            ext.ext = 'bed'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE:PARACLU_PARACLU' {
            ext.args   = "10"
            ext.prefix = { "${meta.id}.paraclu" }
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/paraclu" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE:PARACLU_CUT' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE:PARACLU_CONVERT' {
            ext.cmd1 = 'awk \'{OFS = "\t"}{print \$1, \$3-1, \$4, ".", \$6, \$2}\' | sort -k1,1 -k2,2n'
            ext.suffix = '.paraclu.peaks'
            ext.ext = 'bed'
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/paraclu" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:ICOUNT_SUMMARY' {
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/icount" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:ICOUNT_RNAMAPS' {
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/icount" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:ICOUNT_SIGXLS' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:ICOUNT_PEAKS' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:GUNZIP_SIGXLS' {
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/icount" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:GUNZIP_PEAKS' {
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/icount" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

         withName: 'CLIPSEQ:PEKA' {
             publishDir = [
                 path: { "${params.outdir}/05_peak_calling/peka" },
                 mode: "${params.publish_dir_mode}",
                 saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
             ]
         }
    }
}

/*
========================================================================================
    REPORTING
========================================================================================
*/

if(params.run_reporting) {
    process {
        withName: 'CLIPSEQ:DUMP_SOFTWARE_VERSIONS' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: "${params.publish_dir_mode}",
                pattern: '*_versions.yml'
            ]
        }

        withName: 'CLIPSEQ:CLIPSEQ_CLIPQC' {
            publishDir = [
                path: { "${params.outdir}/06_reports/clipqc" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:MULTIQC' {
            ext.args   = params.multiqc_title ? "-v --title \"$params.multiqc_title\"" : '-v'
            publishDir = [
                path: { "${params.outdir}/06_reports/multiqc" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
