/*
========================================================================================
    GENERAL
========================================================================================
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // withName: CUSTOM_DUMPSOFTWAREVERSIONS {
    //     publishDir = [
    //         path: { "${params.outdir}/pipeline_info" },
    //         mode: "${params.publish_dir_mode}",
    //         pattern: '*_versions.yml'
    //     ]
    // }
}

/*
========================================================================================
    INPUT
========================================================================================
*/

if(params.run_input_check) {
    process {
        withName: 'CLIPSEQ:PARSE_FASTQ_INPUT:SAMPLE_BASE_SAMPLESHEET_CHECK' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:PARSE_FASTQ_INPUT:CAT_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_merged_fastq
            ]
        }
    }   
}

/*
========================================================================================
    GENOME PREPARATION
========================================================================================
*/

if(params.run_genome_prep) {
    process {
        withName: 'UNTAR_.*' {
            ext.args2 = '--no-same-owner'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:GUNZIP_FASTA' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:GUNZIP_GTF' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_GENOME:GUNZIP_FASTA' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:CUSTOM_GETCHROMSIZES' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_GENOME:CUSTOM_GETCHROMSIZES' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:CLIPSEQ_FIND_LONGEST_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:CLIPSEQ_FILTER_GTF' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:ICOUNT_SEG_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:ICOUNT_SEG_FILTGTF' {
            ext.prefix = '.filt.seg'
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED_GENIC_OTHER' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_INDEX:STAR_GENOMEGENERATE' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_indexes
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_INDEX:BOWTIE2_BUILD' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_indexes
            ]
        }
    }
}

/*
========================================================================================
    FASTQ + TRIMMING
========================================================================================
*/

if(params.run_trim_galore_fastqc && !params.skip_fastqc) {
    process {
        withName: 'CLIPSEQ:FASTQC_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
            publishDir = [
                path: { "${params.outdir}/01_prealign/pre_trim_fastqc" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }
}

if(params.run_trim_galore_fastqc && !params.skip_trimming) {
    process {
        withName: 'CLIPSEQ:FASTQC_TRIMGALORE:TRIMGALORE' {
            ext.args   = "--fastqc --length ${params.trim_length}"
            publishDir = [
                [
                    path: { "${params.outdir}/01_prealign/post_trim_fastqc" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimgalore" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.fastq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimgalore" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

/*
========================================================================================
    ALIGNMENT
========================================================================================
*/

if(params.run_alignment) {
    process {
        withName: 'CLIPSEQ:RNA_ALIGN:BOWTIE2_ALIGN' {
            ext.args   = "--norc"
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/smrna/log" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.log'
                ],
                [
                    path: { "${params.outdir}/02_alignment/smrna" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam',
                    enabled: params.save_align_intermed
                ],
                [
                    path: { "${params.outdir}/02_alignment/smrna/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:STAR_ALIGN' {
            ext.args   = [
                '--readFilesCommand zcat',
                '--outSAMtype BAM SortedByCoordinate',
                '--quantMode TranscriptomeSAM',
                '--outFilterMultimapNmax 1',
                '--outFilterMultimapScoreRange 1',
                '--outSAMattributes All',
                '--alignSJoverhangMin 8',
                '--alignSJDBoverhangMin 1',
                '--outFilterType BySJout',
                '--alignIntronMin 20',
                '--alignIntronMax 1000000',
                '--outFilterScoreMin 10',
                '--alignEndsType Extend5pOfRead1',
                '--twopassMode Basic',
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/target/log" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.log'
                ],
                [
                    path: { "${params.outdir}/02_alignment/target" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam',
                    enabled: params.save_align_intermed
                ],
                [
                    path: { "${params.outdir}/02_alignment/target/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:.*BAM_STATS_SAMTOOLS_GENOME:.*' {
            ext.prefix = { "${meta.id}.genome.raw" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPT:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.transcript.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPT:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:.*BAM_SORT_STATS_SAMTOOLS_TRANSCRIPT:.*' {
            ext.prefix = { "${meta.id}.transcript.raw" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: params.save_align_intermed
            ]
        }
    }
}

/*
========================================================================================
    READ FILTERING / UMI DEDUP_COLLAPSE
========================================================================================
*/

if(params.run_umi_dedup) {
    process {
        withName: 'CLIPSEQ:GENOME_DEDUP:UMITOOLS_DEDUP' {
            ext.args = "--umi-separator='${params.umi_separator}:'"
            ext.prefix = { "${meta.id}.genome.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}"
            ]
        }

        withName: 'CLIPSEQ:GENOME_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}"
            ]
        }

        withName: 'CLIPSEQ:GENOME_DEDUP:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.genome.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'CLIPSEQ:TRANSCRIPT_DEDUP:UMITOOLS_DEDUP' {
            ext.args = "--umi-separator='${params.umi_separator}:'"
            ext.prefix = { "${meta.id}.transcript.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}"
            ]
        }

        withName: 'CLIPSEQ:TRANSCRIPT_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}"
            ]
        }

        withName: 'CLIPSEQ:TRANSCRIPT_DEDUP:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.transcript.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }
    }
}
