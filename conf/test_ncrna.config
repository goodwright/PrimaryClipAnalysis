/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.
        nextflow run {{ name }} -profile test,<docker/singularity>
----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline function'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 2
    max_memory = '6.GB'
    max_time   = '6.h'

    // Input data
    species     = 'Hs'
    samplesheet = './tests/data/samplesheets/small-single-sample-se.csv'
    fasta       = './tests/data/genome/yeast_MitoV.fa.gz'
    smrna_fasta = './tests/data/genome/homosapiens_smallRNA.fa.gz'
    gtf         = './tests/data/genome/yeast_MitoV.gtf.gz'

    // extra prepare clipseq outputs to skip this running and make test faster
    fasta_fai                  = './tests/data/genome/yeast_MitoV.fa.fai'
    filtered_gtf               = './tests/data/genome/yeast_MitoV_filtered.gtf'
    chrom_sizes                = './tests/data/genome/yeast_MitoV.fa.sizes'
    smrna_fasta_fai            = './tests/data/genome/homosapiens_smallRNA.fa.fai'
    smrna_chrom_sizes          = './tests/data/genome/homosapiens_smallRNA.fa.sizes'
    longest_transcript         = './tests/data/genome/longest_transcript.txt'
    longest_transcript_fai     = './tests/data/genome/longest_transcript.fai'
    longest_transcript_gtf     = './tests/data/genome/longest_transcript.gtf'
    seg_gtf                    = './tests/data/genome/yeast_MitoV_seg.gtf'
    seg_filt_gtf               = './tests/data/genome/yeast_MitoV_filtered_seg.gtf'
    seg_resolved_gtf           = './tests/data/genome/yeast_MitoV_filtered_seg_genicOtherfalse.resolved.gtf'
    seg_resolved_gtf_genic     = './tests/data/genome/yeast_MitoV_filtered_seg_genicOthertrue.resolved.gtf'
    regions_gtf                = './tests/data/genome/yeast_MitoV_regions.gtf.gz'
    regions_filt_gtf           = './tests/data/genome/yeast_MitoV_filtered_regions.gtf.gz'
    regions_resolved_gtf       = './tests/data/genome/yeast_MitoV_filtered_regions_genicOtherfalse.resolved.gtf'
    regions_resolved_gtf_genic = './tests/data/genome/yeast_MitoV_filtered_regions_genicOthertrue.resolved.gtf'
    target_genome_index        = './tests/data/genome/star.tar.gz'
    smrna_genome_index         = './tests/data/genome/bowtie.tar.gz'

    // ncrna data input
    rDNA_sequence                  = "./tests/data/ncrna/rRNA.fa.gz"
    canonical_snRNA_sequences      = "./tests/data/ncrna/canonical_snRNA.fa.gz"
    mature_tRNA_sequence           = "./tests/data/ncrna/hg38-mature-tRNAs.fa.gz"
    immature_tRNA_bed              = "./tests/data/ncrna/hg38-tRNAs.tar.gz"
    repeats                        = "./tests/data/ncrna/nestedRepeats.txt.gz"
    mito_chromosome                = "Mito"

    // Logic
    run_ncrna           = true

    save_reference      = true
    save_indexes        = true
    save_merged_fastq   = true
    save_trimmed        = true
    save_align_intermed = true
    save_unaligned_res  = true

    // Processes
    peka_params = "-p 0 -sr genome -sub False"

}
